{"version":3,"sources":["webpack:///./src/pages/blog.js"],"names":["BlogIndex","data","location","useState","searchTerm","setSearchTerm","filteredItems","setFilteredItems","loaded","setLoaded","useEffect","urlSearch","window","search","handleChange","split","handleSearch","posts","allMarkdownRemark","edges","e","target","value","trim","startsWith","filter","i","node","frontmatter","category","toLowerCase","includes","replace","title","unBlurAll","document","querySelectorAll","forEach","classList","remove","type","description","className","placeholder","onChange","map","index","fields","slug","categories","key","id","onMouseOver","add","onMouseOut","date","item","onClick","to"],"mappings":"kHAAA,8EAoIeA,UA7HG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAEnB,GAFwC,EAAfC,SAEaC,mBAAS,KAAvCC,EAAR,KAAoBC,EAApB,KACA,EAA4CF,mBAAS,IAA7CG,EAAR,KAAuBC,EAAvB,KACA,EAA4BJ,oBAAS,GAA9BK,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACR,IAAMC,EAAYC,OAAOV,SAASW,OAClC,IAAIL,GAAUG,EAGZ,OAFAG,EAAaH,EAAUI,MAAM,KAAK,SAClCN,GAAU,GAGZO,IACAP,GAAU,KACT,CAACL,IAGJ,IAAIa,EAAQhB,EAAKiB,kBAAkBC,MAE7BL,EAAe,SAACM,GACpBf,EAAce,EAAEC,OAASD,EAAEC,OAAOC,MAAQF,IAGtCJ,EAAe,WACnB,GAAyB,KAAtBZ,EAAWmB,OAAd,CAIA,IAAIjB,EAAgB,GAElBA,EADCF,EAAWoB,WAAW,KACPP,EAAMQ,QAAO,SAAAC,GAAC,OAC5BA,EAAEC,KAAKC,YAAYC,SAASC,cAAcC,SAAS3B,EAAW4B,QAAQ,IAAK,IAAIF,kBAIjEb,EAAMQ,QAAO,SAAAC,GAAC,OAC5BA,EAAEC,KAAKC,YAAYK,MAAMH,cAAcC,SAAS3B,EAAW0B,gBACxDJ,EAAEC,KAAKC,YAAYC,SAASC,cAAcC,SAAS3B,EAAW0B,kBAGrEvB,EAAiBD,QAffC,EAAiBU,IA8BfiB,EAAY,WACFC,SAASC,iBAAiB,aAClCC,SAAQ,SAAAX,GACZA,EAAEY,UAAUC,OAAO,YAIvB,OACE,kBAAC,IAAD,CACEN,MAAO,OACPO,KAAK,SAEL,kBAAC,IAAD,CACEP,MAAO,OACPQ,YAAa,4DAEf,yBAAKC,UAAU,UACb,yBAAKA,UAAU,cACb,wBAAIA,UAAU,aAAd,QACA,yBAAKA,UAAU,aACb,2BACEpB,MAAOlB,EACPuC,YAAY,iCACZC,SAAU9B,MAIjBR,EAAcuC,KAAI,WAAWC,GAAW,IAAnBnB,EAAkB,EAAlBA,KACdM,EAAQN,EAAKC,YAAYK,OAASN,EAAKoB,OAAOC,KAC9CC,EAAatB,EAAKC,YAAYC,SAASd,MAAM,KACnD,OACE,yBACEmC,IAAKJ,EACLJ,UAAU,WACVS,GAAE,YAAcL,EAChBM,YAAa,kBA/CCD,EA+CkB,YAAYL,OA9CtCX,SAASC,iBAAiB,aAClCC,SAAQ,SAAAX,GACTyB,IAAOzB,EAAEyB,GACVzB,EAAEY,UAAUC,OAAO,QAGnBb,EAAEY,UAAUe,IAAI,WAPC,IAACF,GAgDdG,WAAYpB,GAEZ,yBAAKQ,UAAU,YACb,yBAAKA,UAAS,YACXf,EAAKC,YAAY2B,MAEpB,yBAAKb,UAAU,cAEZO,EAAWJ,KAAI,SAACW,EAAMV,GACrB,OACE,0BACEI,IAAKJ,EACLJ,UAAU,UACVe,QAAS,kBAAI3C,EAAa,IAAI0C,KAHhC,IAKIA,QAOZ,wBAAId,UAAU,aAAY,kBAAC,OAAD,CAAMgB,GAAI/B,EAAKoB,OAAOC,MAC7Cf","file":"component---src-pages-blog-js-5161aee4c829ab14dec9.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport '../styles/blog.scss';\n\nconst BlogIndex = ({ data, location }) => {\n\n  const [ searchTerm ,setSearchTerm ] = useState('');\n  const [ filteredItems, setFilteredItems ] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n\n  useEffect(() => {\n    const urlSearch = window.location.search;\n    if(!loaded && urlSearch) {\n      handleChange(urlSearch.split(\"=\")[1]);\n      setLoaded(true);\n      return;\n    }\n    handleSearch();\n    setLoaded(true);\n  }, [searchTerm]);\n\n\n  let posts = data.allMarkdownRemark.edges;\n\n  const handleChange = (e) => {\n    setSearchTerm(e.target ? e.target.value : e);\n  }\n\n  const handleSearch = () => {\n    if(searchTerm.trim() === '') {\n      setFilteredItems(posts);\n      return;\n    }\n    let filteredItems = [];\n    if(searchTerm.startsWith(\"#\")) {\n      filteredItems = posts.filter(i => (\n        i.node.frontmatter.category.toLowerCase().includes(searchTerm.replace(\"#\", \"\").toLowerCase())\n      ))\n    }\n    else {\n      filteredItems = posts.filter(i => (\n        i.node.frontmatter.title.toLowerCase().includes(searchTerm.toLowerCase())\n        || i.node.frontmatter.category.toLowerCase().includes(searchTerm.toLowerCase())\n      ))\n    }\n    setFilteredItems(filteredItems);\n  }\n\n  const blurNonFocused = (id) => {\n    const items = document.querySelectorAll(\".blogItem\");\n    items.forEach(i => {\n      if(id === i.id) {\n        i.classList.remove(\"blur\");\n      }\n      else {\n        i.classList.add(\"blur\");\n      }\n    });\n  }\n\n  const unBlurAll = () => {\n    const items = document.querySelectorAll(\".blogItem\");\n    items.forEach(i => {\n      i.classList.remove(\"blur\");\n    });\n  }\n\n  return (\n    <Layout\n      title={\"Blog\"}\n      type=\"clean\"\n    >\n      <SEO\n        title={\"Blog\"}\n        description={\"take a look at what drives us, and how we do what we do\"}\n      />\n      <div className=\"parent\">\n        <div className=\"pageHeader\">\n          <h1 className=\"pageTitle\">Blog</h1>\n          <div className=\"searchBar\">\n            <input\n              value={searchTerm}\n              placeholder=\"SEARCH FOR TITLE, CATEGORY ETC\"\n              onChange={handleChange}\n            />\n          </div>\n        </div>\n      {filteredItems.map(({ node }, index) => {\n        const title = node.frontmatter.title || node.fields.slug;\n        const categories = node.frontmatter.category.split(\",\");\n        return (\n          <div\n            key={index}\n            className=\"blogItem\"\n            id={`blogItem-${index}`}\n            onMouseOver={()=>blurNonFocused(`blogItem-${index}`)}\n            onMouseOut={unBlurAll}\n          >\n            <div className=\"blogMeta\">\n              <div className={`blogDate`}>\n                {node.frontmatter.date}\n              </div>\n              <div className=\"categories\">\n              {\n                (categories.map((item, index) => {\n                  return (\n                    <span\n                      key={index}\n                      className=\"hashtag\"\n                      onClick={()=>handleChange(`#${item}`)}\n                    >\n                      #{item}\n                    </span>\n                  )\n                }))\n              }\n              </div>\n            </div>\n            <h3 className=\"blogTitle\"><Link to={node.fields.slug}>\n              {title}\n            </Link></h3>\n          </div>\n        )\n      })}\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt(pruneLength: 40)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMDD, YYYY\")\n            title\n            category\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}